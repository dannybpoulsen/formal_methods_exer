# Exercises
In these exercises you will be tasked with implementing the software
analysis techniques we covered in the lectures for a very small
"While"-language: Whiley.  

The language is a small imperative language with the usual control
structures (if, while, assignment and  sequential exeruction). It only
has signed (si8) and unsigned (ui8) 8-bit integers as datatypes, and
it has access to a 256 bytes of memory. 

## Skeleton Solutions
This repository contains solution skeletons written in C++. You are
welcome to use these, but are also welcome to implement everything
from scratch in your favourite programming language--- if you choose to implemenet everything from scratch
then you should remember that the task then also includes parsing  Whiley. 

# Exercise 0
If you choose to use the skeletons then you can skip this exercise. 

- Implement a parser for Whiley
- Implement a typechecker for Whiley

# Exercise 1
Devise an algorithm for converting a Whiley-program to a CFA and implement it. To do this, you will need
1. Create data structures for representing Control locations, instructions and expressions. It should be possible to mark control flow locations as error locations
1.1. Allowed  instructions  edges are 
	Assume, 
	Store,
	Assign
	
1.2 The expressions we allow are: 
	Add (addition)
	Sub (subtraction)
	Mul (multiplicatio)
	Div (division)
	SDiv (signed division),
	SLt (Signed less than)
	SLEq (Signed less than or equal)
	Lt (less than)
	LEq (less than or equal)
	Eq (Equality(
	Neq (Inequlaity(
	GEq (Greater than or equal)
	Gt (Greater than)
	SGEq (Signed greater than or equal)
	SGt (Signed greater than)
	Negation (Logical negation of expression)
	Deref (Read from memory address)
	Undef (An undefifed expression --- corresponds to a non-deterministic value)
	
1.3 Assert statements in whiley should be unfolded into different control flow paths. One path should lead to an error location (signalling the assert was not true) and the other should correspond to normal program flow. The paths should be guarded by relevant Assume statements


## Skeleton
In the skeleton solution you should add your algorithm to the file "lib/components/compiler_student.cpp". 

You can test our your solution by running "bin/whiley2cfa_student <whiley_program>". It will parse a whiley-program, call your conversion algorithm and output the resulting CFA as dot-graph.   

- The skeleton solution already implements the CFA-structure for you. You  can see the interface of the CFA in the .hp file in "lib/ir/include/"
- 

# Exercise 2 
Implement an explicit state reachability checking algorithm. 
1. The algorithm should search for error locations,
2. You will need to decide on a good State-representation,
3. You will need to implement a mechanism to evaluate the (possible) values of an expression in a given state
4. Using your evaluation mechanisme, you then need to create the transfer functions for each of the instructions


## Skeleton
- 


